interface Node {
  id: ID!
}

interface Error {
  message: String!
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]
}

type Mutation {
  uploadFile(file: Upload!): File!
}

scalar Upload

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

type PageInfo {
  hasNext: Boolean!
  hasPrevious: Boolean!
  startCursor: String
  endCursor: String
}

union BoolResult = Succeeded | Errors

type Succeeded {
  succeeded: String!
}

type Errors {
  userError: UserError
  applicationError: ApplicationError
}

type UserError implements Error {
  message: String!
}

type ApplicationError implements Error {
  message: String!
}
