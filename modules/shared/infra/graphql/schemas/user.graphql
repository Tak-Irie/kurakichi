type User implements Node {
  id: ID!
  name: String
  email: String
  selfIntro: String
  avatarUrl: String
  heroImageUrl: String
  role: UserRole
  messages: MessageConnection
}

"""
VISITOR | CLIENT | EXPERT
"""
scalar UserRole

type MessageConnection {
  edges: [MessageEdges]!
  pageInfo: PageInfo!
}

type MessageEdges {
  cursor: String!
  node: Message!
}

type Message implements Node {
  id: ID!
  content: String
  status: MessageStatus
  sentAt: String
  sender: User
  receiver: User
}

"""
SENT | READ | UNREAD | DRAFT
"""
scalar MessageStatus

type MessageTree implements Node {
  id: ID!
  leaves: MessageLeafConnection
}

type MessageLeafConnection {
  edges: [MessageLeafEdges]!
  pageInfo: PageInfo!
}

type MessageLeafEdges {
  cursor: String!
  node: Message!
  isRoot: Boolean!
}

type Query {
  getUserByCookie: UserPayload
  getUserById(userId: String!): UserPayload
  getUsers: UsersPayload
  getMessagesByCookie: MessagesPayload
  getMessagesByTreeId(treeId: String!): MessageTreePayload
}

type Mutation {
  registerUser(input: registerUserInput!): UserPayload
  loginUser(input: loginUserInput!): UserPayload
  updateUser(input: updateUserInput!): UserPayload
  logoutUser: BoolPayload
  deleteUser: BoolPayload
  forgetPassword(email: String!): BoolPayload
  sendMessage(input: sendMessageInput!): MessagePayload
  replyMessage(input: replyMessageInput!): MessagePayload
}

type UserPayload {
  user: User
  errors: Errors
}

type UsersPayload {
  users: [User!]
  errors: Errors
}

type MessagePayload {
  message: Message
  errors: Errors
}
type MessagesPayload {
  messages: [Message]
  errors: Errors
}

type MessageTreePayload {
  messageTree: MessageTree
  errors: Errors
}

type DeleteUserPayload {
  result: Boolean!
  errors: Errors
}

input registerUserInput {
  email: String!
  password: String!
}

input updateUserInput {
  name: String
  email: String
  selfIntro: String
  avatarUrl: String
  heroImageUrl: String
}

input loginUserInput {
  email: String!
  password: String!
}

input sendMessageInput {
  receiverId: String!
  content: String!
}

input replyMessageInput {
  replyTargetId: String!
  content: String!
}
