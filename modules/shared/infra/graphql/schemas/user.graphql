type User implements Node {
  id: ID!
  name: String
  email: String
  selfIntro: String
  avatarUrl: String
  heroImageUrl: String
  role: UserRole
  messages: MessageConnection
}

enum UserRole {
  VISITOR
  CLIENT
  EXPERT
}

type MessageConnection {
  edges: [MessageEdges]
  pageInfo: PageInfo!
}

type MessageEdges {
  cursor: String!
  node: Message
}

type Message implements Node {
  id: ID!
  content: String
  status: MessageStatus
  sentAt: String
  sender: User
  receiver: User
}

enum MessageStatus {
  SENT
  READ
  UNREAD
  DRAFT
}

type MessageTree implements Node {
  id: ID!
  leaves: MessageLeafConnection
}

type MessageLeafConnection {
  edges: [MessageLeafEdges]
  pageInfo: PageInfo!
}

type MessageLeafEdges {
  cursor: String!
  node: Message
  isRoot: Boolean!
}

type Query {
  getUserByCookie: UserPayload
  getUserById(userId: String!): UserPayload
  getUsers: UsersPayload
  getMessagesByCookie: MessagePayload
  getMessagesByTreeId(id: String!): MessageTreePayload
}

type Mutation {
  registerUser(input: registerUserInput!): UserPayload
  replyMessage(content: String!, replyTargetId: String!): MessagePayload
  updateUser(input: updateUserInput!): UserPayload
  sendMessage(receiverId: String!, textInput: String!): MessagePayload
  deleteUser: BoolPayload
  forgetPassword(email: String!): BoolPayload
  login(email: String!, password: String!): UserPayload
  logout: BoolPayload
}

type UserPayload {
  user: User
  errors: Errors
}

type UsersPayload {
  users: [User!]
  errors: Errors
}

type MessagePayload {
  message: Message
  errors: Errors
}

type MessageTreePayload {
  messageTree: MessageTree
  errors: Errors
}

type DeleteUserPayload {
  result: Boolean!
  errors: Errors
}

input registerUserInput {
  email: String!
  password: String!
}

input updateUserInput {
  name: String
  email: String
  selfIntro: String
  avatarUrl: String
  heroImageUrl: String
}
