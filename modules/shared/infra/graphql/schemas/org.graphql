type Org implements Node {
  id: ID!
  name: String
  email: String
  description: String
  address: Address
  phoneNumber: String
  homePage: String
  avatarUrl: String
  heloImageUrl: String
  members: MemberConnection
  inquiries: InquiryConnection
}

type Address {
  address: String
  latitude: Float
  longitude: Float
}

type MemberConnection {
  edges: [MemberEdges]
  pageInfo: PageInfo!
}

type MemberEdges {
  cursor: String!
  node: User
  isAdmin: Boolean!
}

type InquiryConnection {
  edges: [InquiryEdges]
  pageInfo: PageInfo!
}

type InquiryEdges {
  cursor: String!
  node: Inquiry
}

type Inquiry implements Node {
  id: ID!
  content: String
  sender: User
  receiver: Org
  sentAt: String
  category: InquiryCategory
  inquiryStatus: InquiryStatus
}

enum InquiryCategory {
  APPLICATION
  CONTACT
  COUNSEL
  INQUIRY
  OTHERS
}

enum InquiryStatus {
  DONE
  DRAFT
  UNREAD
  WORKING
}

type InquiryTree implements Node {
  id: ID!
  leaves: InquiryLeafConnection
}

type InquiryLeafConnection {
  edges: [InquiryLeafEdges]
  pageInfo: PageInfo!
}

type InquiryLeafEdges {
  cursor: String!
  node: Inquiry
  isRoot: Boolean!
}

type Query {
  getOrg(id: String!): OrgPayload
  getOrgs: OrgsPayload
  getOrgInfoByMemberCookie: OrgPayload
  getInquiry(id: String!): InquiryPayload
  getInquiries: InquiriesPayload
  getInquiriesByTreeId(id: String!): InquiryTreePayload
}

type Mutation {
  acceptJoinOrg(requestUserId: String!, requestedOrgId: String!): OrgPayload
  registerOrg(input: RegisterOrgInput): OrgPayload
  updateOrg(input: UpdateOrgInput): OrgPayload
  requestJoinOrg(orgId: String!): OrgPayload
  replyInquiry(content: String!, replyTargetId: String!): InquiryPayload
  sendInquiry(input: SendInquiryInput): InquiryPayload
  updateInquiryStatus(input: UpdateInquiryStatusInput): InquiryPayload
}

input UpdateOrgInput {
  orgId: ID!
  name: String
  email: String
  address: String
  phoneNumber: String
  description: String
  homePage: String
}

input RegisterOrgInput {
  name: String!
  email: String!
  address: String!
  phoneNumber: String!
}

input SendInquiryInput {
  userId: ID!
  orgId: ID!
  category: InquiryCategory!
  content: String!
}

input UpdateInquiryStatusInput {
  id: ID!
  inquiryStatus: InquiryStatus!
}

type OrgPayload {
  org: Org
  errors: Errors
}
type OrgsPayload {
  orgs: [Org]
  errors: Errors
}

type InquiryPayload {
  inquiry: Inquiry
  errors: Errors
}

type InquiriesPayload {
  inquiries: InquiryConnection
  errors: Errors
}

type InquiryTreePayload {
  inquiryTree: InquiryTree
  errors: Errors
}
