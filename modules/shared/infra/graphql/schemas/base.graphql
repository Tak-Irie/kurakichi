type Base implements Node {
  id: ID!
  karte: Karte
  dialogs: DialogConnection
  fellows: FellowConnection
}

type Karte implements Node {
  id: ID!
}

type Dialog implements Node {
  id: ID!
  content: String
}

type DialogConnection {
  edges: [DialogEdges!]
  pageInfo: PageInfo
}

type DialogEdges {
  cursor: String!
  node: Dialog!
}

type FellowConnection {
  edges: [FellowEdge!]
  pageInfo: PageInfo
}

type FellowEdge {
  cursor: String!
  node: User!
  isBaseAdmin: Boolean
}

type Query {
  getBase(id: String!): BasePayload
  getKarte(id: String!): KartePayload
  getDialogsByBaseId(id: String!): [Dialog]
}

type Mutation {
  createBase: BasePayload
  postDialog(input: postDialogInput!): PostDialogPayload
}

type Subscription {
  dialogPosted: Dialog
}

type BasePayload {
  base: Base
  errors: Errors
}

type KartePayload {
  karte: Karte
  errors: Errors
}

type PostDialogPayload {
  dialog: Dialog
  errors: Errors
}

type DialogPayload {
  dialog: [Dialog]
  errors: Errors
}

input postDialogInput {
  content: String!
}
