type Address {
  address: String!
  latitude: Float!
  longitude: Float!
}

type ApplicationError implements Error {
  message: String!
}

type Base implements Node {
  dialogs: DialogConnection
  fellows: FellowConnection
  id: ID!
  karte: Karte
}

union BaseResult = Base | Errors

union BoolResult = Errors | Succeeded

type Dialog implements Node {
  content: String
  id: ID!
}

type DialogConnection {
  edges: [DialogEdges!]
  pageInfo: PageInfo
}

type DialogEdges {
  cursor: String!
  node: Dialog!
}

union DialogResult = Dialog | Errors

type Dialogs {
  dialogs: [Dialog!]
}

union DialogsResult = Dialogs | Errors

interface Error {
  message: String!
}

type Errors {
  applicationError: ApplicationError
  userError: UserError
}

type FellowConnection {
  edges: [FellowEdge!]
  pageInfo: PageInfo
}

type FellowEdge {
  cursor: String!
  isBaseAdmin: Boolean
  node: User!
}

type Hoge {
  id: ID!
}

union InquiriesResult = Errors | InquiryConnection

type Inquiry implements Node {
  category: InquiryCategory
  content: String
  id: ID!
  inquiryStatus: InquiryStatus
  receivedOrg: Org
  replier: User
  sender: User
  sentAt: String
}

"""APPLICATION | CONTACT | COUNSEL | INQUIRY | OTHERS"""
scalar InquiryCategory

type InquiryConnection {
  edges: [InquiryEdges!]
  pageInfo: PageInfo
}

type InquiryEdges {
  cursor: String!
  node: Inquiry!
}

type InquiryLeafConnection {
  edges: [InquiryLeafEdges]!
  pageInfo: PageInfo
}

type InquiryLeafEdges {
  cursor: String!
  isRoot: Boolean
  node: Inquiry!
}

union InquiryResult = Errors | Inquiry

"""DONE | DRAFT | UNREAD | WORKING"""
scalar InquiryStatus

type InquiryTree implements Node {
  id: ID!
  leaves: InquiryLeafConnection
}

union InquiryTreeResult = Errors | InquiryTree

type Karte implements Node {
  id: ID!
}

union KarteResult = Errors | Karte

type MemberConnection {
  edges: [MemberEdges!]
  pageInfo: PageInfo
}

type MemberEdges {
  cursor: String!
  isAdmin: Boolean
  node: User!
}

type Message implements Node {
  content: String
  id: ID!
  receiver: User
  sender: User
  sentAt: String
  status: MessageStatus
}

type MessageConnection {
  edges: [MessageEdges!]
  pageInfo: PageInfo
}

type MessageEdges {
  cursor: String!
  node: Message!
}

type MessageLeafConnection {
  edges: [MessageLeafEdges!]
  pageInfo: PageInfo
}

type MessageLeafEdges {
  cursor: String!
  isRoot: Boolean
  node: Message!
}

union MessageResult = Errors | Message

"""SENT | READ | UNREAD | DRAFT"""
scalar MessageStatus

type MessageTree implements Node {
  id: ID!
  leaves: MessageLeafConnection
}

union MessageTreeResult = Errors | MessageTree

type Messages {
  messages: [Message!]
}

union MessagesResult = Errors | Messages

type Mutation {
  acceptJoinOrg(input: acceptJoinOrgInput!): OrgResult
  changePassword(input: changePasswordInput): BoolResult
  createBase: BaseResult
  deleteUser: BoolResult
  forgetPassword(email: String!): BoolResult
  loginUser(input: loginUserInput!): UserResult
  logoutUser: BoolResult
  postDialog(input: postDialogInput!): PostDialogResult
  registerOrg(input: RegisterOrgInput!): OrgResult
  registerUser(input: registerUserInput!): UserResult
  replyInquiry(input: replyInquiryInput!): InquiryResult
  replyMessage(input: replyMessageInput!): MessageResult
  requestJoinOrg(orgId: String!): OrgResult
  sendInquiry(input: SendInquiryInput!): InquiryResult
  sendMessage(input: sendMessageInput!): MessageResult
  updateInquiryStatus(input: UpdateInquiryStatusInput!): InquiryResult
  updateOrg(input: UpdateOrgInput!): OrgResult
  updateUser(input: updateUserInput!): UserResult
}

interface Node {
  id: ID!
}

type Org implements Node {
  address: Address
  avatarUrl: String
  description: String
  email: String
  heroImageUrl: String
  homePage: String
  id: ID!
  inquiries: InquiryConnection
  members: MemberConnection
  name: String
  phoneNumber: String
}

union OrgResult = Errors | Org

type Orgs {
  orgs: [Org!]
}

union OrgsResult = Errors | Orgs

type PageInfo {
  endCursor: String
  hasNext: Boolean!
  hasPrevious: Boolean!
  startCursor: String
}

union PostDialogResult = Dialog | Errors

type Query {
  getBase(id: String!): BaseResult
  getDialogsByBaseId(id: String!): DialogsResult
  getInquiriesByOrgId(orgId: String!): InquiriesResult
  getInquiriesByTreeId(treeId: String!): InquiryTreeResult
  getInquiry(inquiryId: String!): InquiryResult
  getKarte(id: String!): KarteResult
  getMessagesByCookie: MessagesResult
  getMessagesByTreeId(treeId: String!): MessageTreeResult
  getOrg(id: String!): OrgResult
  getOrgInfoByMemberCookieAndId(orgId: String!): OrgResult
  getOrgs: OrgsResult
  getUserByCookie: UserResult
  getUserById(userId: String!): UserResult
  getUsers: UsersResult
  hoge(id: ID!): Hoge
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]
}

input RegisterOrgInput {
  address: String!
  email: String!
  name: String!
  phoneNumber: String!
}

input SendInquiryInput {
  category: InquiryCategory!
  content: String!
  orgId: ID!
}

type Subscription {
  dialogPosted: Dialog
}

type Succeeded {
  succeeded: String!
}

input UpdateInquiryStatusInput {
  inquiryId: ID!
  inquiryStatus: InquiryStatus!
}

input UpdateOrgInput {
  address: String
  description: String
  email: String
  homePage: String
  name: String
  orgId: ID!
  phoneNumber: String
}

type User implements Node {
  avatarUrl: String
  email: String
  heroImageUrl: String
  id: ID!
  messages: MessageConnection
  name: String
  role: UserRole
  selfIntro: String
}

type UserError implements Error {
  message: String!
}

union UserResult = Errors | User

"""VISITOR | CLIENT | EXPERT"""
scalar UserRole

type Users {
  users: [User!]
}

union UsersResult = Errors | Users

input acceptJoinOrgInput {
  requestUserId: String!
  requestedOrgId: String!
}

input changePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input loginUserInput {
  email: String!
  password: String!
}

input postDialogInput {
  content: String!
}

input registerUserInput {
  email: String!
  password: String!
}

input replyInquiryInput {
  content: String!
  replyTargetId: String!
}

input replyMessageInput {
  content: String!
  replyTargetId: String!
}

input sendMessageInput {
  content: String!
  receiverId: String!
}

input updateUserInput {
  avatarUrl: String
  email: String
  heroImageUrl: String
  name: String
  selfIntro: String
}