type Address {
  address: String
  latitude: Float
  longitude: Float
}

type ApplicationError {
  message: String!
}

type Base implements Node {
  dialogs: DialogConnection
  fellows: FellowConnection
  id: ID!
  karte: Karte
}

type BasePayload {
  base: Base
  errors: Errors
}

type BoolPayload {
  errors: Errors
  message: String
  result: Boolean!
}

type DeleteUserPayload {
  errors: Errors
  result: Boolean!
}

type Dialog implements Node {
  content: String
  id: ID!
}

type DialogConnection {
  edges: [DialogEdges!]
  pageInfo: PageInfo
}

type DialogEdges {
  cursor: String!
  node: Dialog!
}

type DialogPayload {
  dialog: [Dialog]
  errors: Errors
}

type Errors {
  applicationError: ApplicationError
  userError: UserError
}

type FellowConnection {
  edges: [FellowEdge!]
  pageInfo: PageInfo
}

type FellowEdge {
  cursor: String!
  isBaseAdmin: Boolean
  node: User!
}

type Hoge {
  id: ID!
}

type InquiriesPayload {
  errors: Errors
  inquiries: InquiryConnection
}

type Inquiry implements Node {
  category: InquiryCategory
  content: String
  id: ID!
  inquiryStatus: InquiryStatus
  receivedOrg: Org
  replier: User
  sender: User
  sentAt: String
}

"""APPLICATION | CONTACT | COUNSEL | INQUIRY | OTHERS"""
scalar InquiryCategory

type InquiryConnection {
  edges: [InquiryEdges!]
  pageInfo: PageInfo
}

type InquiryEdges {
  cursor: String!
  node: Inquiry!
}

type InquiryLeafConnection {
  edges: [InquiryLeafEdges]!
  pageInfo: PageInfo
}

type InquiryLeafEdges {
  cursor: String!
  isRoot: Boolean
  node: Inquiry!
}

type InquiryPayload {
  errors: Errors
  inquiry: Inquiry
}

"""DONE | DRAFT | UNREAD | WORKING"""
scalar InquiryStatus

type InquiryTree implements Node {
  id: ID!
  leaves: InquiryLeafConnection
}

type InquiryTreePayload {
  errors: Errors
  inquiryTree: InquiryTree
}

type Karte implements Node {
  id: ID!
}

type KartePayload {
  errors: Errors
  karte: Karte
}

type MemberConnection {
  edges: [MemberEdges!]
  pageInfo: PageInfo
}

type MemberEdges {
  cursor: String!
  isAdmin: Boolean
  node: User!
}

type Message implements Node {
  content: String
  id: ID!
  receiver: User
  sender: User
  sentAt: String
  status: MessageStatus
}

type MessageConnection {
  edges: [MessageEdges!]
  pageInfo: PageInfo
}

type MessageEdges {
  cursor: String!
  node: Message!
}

type MessageLeafConnection {
  edges: [MessageLeafEdges!]
  pageInfo: PageInfo
}

type MessageLeafEdges {
  cursor: String!
  isRoot: Boolean
  node: Message!
}

type MessagePayload {
  errors: Errors
  message: Message
}

"""SENT | READ | UNREAD | DRAFT"""
scalar MessageStatus

type MessageTree implements Node {
  id: ID!
  leaves: MessageLeafConnection
}

type MessageTreePayload {
  errors: Errors
  messageTree: MessageTree
}

type MessagesPayload {
  errors: Errors
  messages: [Message]
}

type Mutation {
  acceptJoinOrg(input: acceptJoinOrgInput!): OrgPayload
  createBase: BasePayload
  deleteUser: BoolPayload
  forgetPassword(email: String!): BoolPayload
  loginUser(input: loginUserInput!): UserPayload
  logoutUser: BoolPayload
  postDialog(input: postDialogInput!): PostDialogPayload
  registerOrg(input: RegisterOrgInput!): OrgPayload
  registerUser(input: registerUserInput!): UserPayload
  replyInquiry(input: replyInquiryInput!): InquiryPayload
  replyMessage(input: replyMessageInput!): MessagePayload
  requestJoinOrg(orgId: String!): OrgPayload
  sendInquiry(input: SendInquiryInput!): InquiryPayload
  sendMessage(input: sendMessageInput!): MessagePayload
  updateInquiryStatus(input: UpdateInquiryStatusInput!): InquiryPayload
  updateOrg(input: UpdateOrgInput!): OrgPayload
  updateUser(input: updateUserInput!): UserPayload
}

interface Node {
  id: ID!
}

type Org implements Node {
  address: Address
  avatarUrl: String
  description: String
  email: String
  heroImageUrl: String
  homePage: String
  id: ID!
  inquiries: InquiryConnection
  members: MemberConnection
  name: String
  phoneNumber: String
}

type OrgPayload {
  errors: Errors
  org: Org
}

type OrgsPayload {
  errors: Errors
  orgs: [Org]
}

type PageInfo {
  endCursor: String
  hasNext: Boolean!
  hasPrevious: Boolean!
  startCursor: String
}

type PostDialogPayload {
  dialog: Dialog
  errors: Errors
}

type Query {
  getBase(id: String!): BasePayload
  getDialogsByBaseId(id: String!): [Dialog]
  getInquiriesByOrgId(orgId: String!): InquiriesPayload
  getInquiriesByTreeId(treeId: String!): InquiryTreePayload
  getInquiry(inquiryId: String!): InquiryPayload
  getKarte(id: String!): KartePayload
  getMessagesByCookie: MessagesPayload
  getMessagesByTreeId(treeId: String!): MessageTreePayload
  getOrg(id: String!): OrgPayload
  getOrgInfoByMemberCookieAndId(orgId: String!): OrgPayload
  getOrgs: OrgsPayload
  getUserByCookie: UserPayload
  getUserById(userId: String!): UserPayload
  getUsers: UsersPayload
  hoge(id: ID!): Hoge
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]
}

input RegisterOrgInput {
  address: String!
  email: String!
  name: String!
  phoneNumber: String!
}

input SendInquiryInput {
  category: InquiryCategory!
  content: String!
  orgId: ID!
}

type Subscription {
  dialogPosted: Dialog
}

input UpdateInquiryStatusInput {
  inquiryId: ID!
  inquiryStatus: InquiryStatus!
}

input UpdateOrgInput {
  address: String
  description: String
  email: String
  homePage: String
  name: String
  orgId: ID!
  phoneNumber: String
}

type User implements Node {
  avatarUrl: String
  email: String
  heroImageUrl: String
  id: ID!
  messages: MessageConnection
  name: String
  role: UserRole
  selfIntro: String
}

type UserError {
  message: String!
}

type UserPayload {
  errors: Errors
  user: User
}

"""VISITOR | CLIENT | EXPERT"""
scalar UserRole

type UsersPayload {
  errors: Errors
  users: [User!]
}

input acceptJoinOrgInput {
  requestUserId: String!
  requestedOrgId: String!
}

input loginUserInput {
  email: String!
  password: String!
}

input postDialogInput {
  content: String!
}

input registerUserInput {
  email: String!
  password: String!
}

input replyInquiryInput {
  content: String!
  replyTargetId: String!
}

input replyMessageInput {
  content: String!
  replyTargetId: String!
}

input sendMessageInput {
  content: String!
  receiverId: String!
}

input updateUserInput {
  avatarUrl: String
  email: String
  heroImageUrl: String
  name: String
  selfIntro: String
}